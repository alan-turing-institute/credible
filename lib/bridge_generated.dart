// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.64.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:ffi' as ffi;

abstract class TrustchainFfi {
  /// Example greet function.
  Future<String> greet({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGreetConstMeta;

  /// Example resolve interface.
  Future<String> resolve({required String did, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResolveConstMeta;

  /// Resolves a given DID document assuming trust in endpoint.
  Future<String> didResolve({required String did, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDidResolveConstMeta;

  /// Verifies a given DID assuming trust in endpoint.
  Future<void> didVerify(
      {required String did, required String endpoint, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDidVerifyConstMeta;

  /// Verifies a given DID bundle providing complete verification without trust in endpoint.
  Future<String> didVerifyBundle({required String bundleJson, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDidVerifyBundleConstMeta;

  /// Verifies a verifiable credential. Analogous with [didkit](https://docs.rs/didkit/latest/didkit/c/fn.didkit_vc_verify_credential.html).
  Future<String> vcVerifyCredential(
      {required String credentialJson,
      required String proofOptionsJson,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVcVerifyCredentialConstMeta;

  /// Issues a verifiable presentation. Analogous with [didkit](https://docs.rs/didkit/latest/didkit/c/fn.didkit_vc_issue_presentation.html).
  Future<void> vcIssuePresentation(
      {required String presentationJson,
      required String proofOptionsJson,
      required String keyJson,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVcIssuePresentationConstMeta;

  /// Verifies a verifiable presentation. Analogous with [didkit](https://docs.rs/didkit/latest/didkit/c/fn.didkit_vc_verify_presentation.html).
  Future<String> vcVerifyPresentation(
      {required String presentationJson,
      required String proofOptionsJson,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVcVerifyPresentationConstMeta;
}

class TrustchainFfiImpl implements TrustchainFfi {
  final TrustchainFfiPlatform _platform;
  factory TrustchainFfiImpl(ExternalLibrary dylib) =>
      TrustchainFfiImpl.raw(TrustchainFfiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory TrustchainFfiImpl.wasm(FutureOr<WasmModule> module) =>
      TrustchainFfiImpl(module as ExternalLibrary);
  TrustchainFfiImpl.raw(this._platform);
  Future<String> greet({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_greet(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kGreetConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGreetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "greet",
        argNames: [],
      );

  Future<String> resolve({required String did, dynamic hint}) {
    var arg0 = _platform.api2wire_String(did);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_resolve(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kResolveConstMeta,
      argValues: [did],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResolveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "resolve",
        argNames: ["did"],
      );

  Future<String> didResolve({required String did, dynamic hint}) {
    var arg0 = _platform.api2wire_String(did);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_did_resolve(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDidResolveConstMeta,
      argValues: [did],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDidResolveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "did_resolve",
        argNames: ["did"],
      );

  Future<void> didVerify(
      {required String did, required String endpoint, dynamic hint}) {
    var arg0 = _platform.api2wire_String(did);
    var arg1 = _platform.api2wire_String(endpoint);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_did_verify(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kDidVerifyConstMeta,
      argValues: [did, endpoint],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDidVerifyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "did_verify",
        argNames: ["did", "endpoint"],
      );

  Future<String> didVerifyBundle({required String bundleJson, dynamic hint}) {
    var arg0 = _platform.api2wire_String(bundleJson);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_did_verify_bundle(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDidVerifyBundleConstMeta,
      argValues: [bundleJson],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDidVerifyBundleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "did_verify_bundle",
        argNames: ["bundleJson"],
      );

  Future<String> vcVerifyCredential(
      {required String credentialJson,
      required String proofOptionsJson,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(credentialJson);
    var arg1 = _platform.api2wire_String(proofOptionsJson);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_vc_verify_credential(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kVcVerifyCredentialConstMeta,
      argValues: [credentialJson, proofOptionsJson],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVcVerifyCredentialConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vc_verify_credential",
        argNames: ["credentialJson", "proofOptionsJson"],
      );

  Future<void> vcIssuePresentation(
      {required String presentationJson,
      required String proofOptionsJson,
      required String keyJson,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(presentationJson);
    var arg1 = _platform.api2wire_String(proofOptionsJson);
    var arg2 = _platform.api2wire_String(keyJson);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_vc_issue_presentation(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kVcIssuePresentationConstMeta,
      argValues: [presentationJson, proofOptionsJson, keyJson],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVcIssuePresentationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vc_issue_presentation",
        argNames: ["presentationJson", "proofOptionsJson", "keyJson"],
      );

  Future<String> vcVerifyPresentation(
      {required String presentationJson,
      required String proofOptionsJson,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(presentationJson);
    var arg1 = _platform.api2wire_String(proofOptionsJson);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_vc_verify_presentation(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kVcVerifyPresentationConstMeta,
      argValues: [presentationJson, proofOptionsJson],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVcVerifyPresentationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vc_verify_presentation",
        argNames: ["presentationJson", "proofOptionsJson"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class TrustchainFfiPlatform extends FlutterRustBridgeBase<TrustchainFfiWire> {
  TrustchainFfiPlatform(ffi.DynamicLibrary dylib)
      : super(TrustchainFfiWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class TrustchainFfiWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TrustchainFfiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TrustchainFfiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_greet(
    int port_,
  ) {
    return _wire_greet(
      port_,
    );
  }

  late final _wire_greetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_greet');
  late final _wire_greet = _wire_greetPtr.asFunction<void Function(int)>();

  void wire_resolve(
    int port_,
    ffi.Pointer<wire_uint_8_list> did,
  ) {
    return _wire_resolve(
      port_,
      did,
    );
  }

  late final _wire_resolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_resolve');
  late final _wire_resolve = _wire_resolvePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_did_resolve(
    int port_,
    ffi.Pointer<wire_uint_8_list> did,
  ) {
    return _wire_did_resolve(
      port_,
      did,
    );
  }

  late final _wire_did_resolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_did_resolve');
  late final _wire_did_resolve = _wire_did_resolvePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_did_verify(
    int port_,
    ffi.Pointer<wire_uint_8_list> did,
    ffi.Pointer<wire_uint_8_list> endpoint,
  ) {
    return _wire_did_verify(
      port_,
      did,
      endpoint,
    );
  }

  late final _wire_did_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_did_verify');
  late final _wire_did_verify = _wire_did_verifyPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_did_verify_bundle(
    int port_,
    ffi.Pointer<wire_uint_8_list> bundle_json,
  ) {
    return _wire_did_verify_bundle(
      port_,
      bundle_json,
    );
  }

  late final _wire_did_verify_bundlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_did_verify_bundle');
  late final _wire_did_verify_bundle = _wire_did_verify_bundlePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_vc_verify_credential(
    int port_,
    ffi.Pointer<wire_uint_8_list> credential_json,
    ffi.Pointer<wire_uint_8_list> proof_options_json,
  ) {
    return _wire_vc_verify_credential(
      port_,
      credential_json,
      proof_options_json,
    );
  }

  late final _wire_vc_verify_credentialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_vc_verify_credential');
  late final _wire_vc_verify_credential =
      _wire_vc_verify_credentialPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_vc_issue_presentation(
    int port_,
    ffi.Pointer<wire_uint_8_list> presentation_json,
    ffi.Pointer<wire_uint_8_list> proof_options_json,
    ffi.Pointer<wire_uint_8_list> key_json,
  ) {
    return _wire_vc_issue_presentation(
      port_,
      presentation_json,
      proof_options_json,
      key_json,
    );
  }

  late final _wire_vc_issue_presentationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_vc_issue_presentation');
  late final _wire_vc_issue_presentation =
      _wire_vc_issue_presentationPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_vc_verify_presentation(
    int port_,
    ffi.Pointer<wire_uint_8_list> presentation_json,
    ffi.Pointer<wire_uint_8_list> proof_options_json,
  ) {
    return _wire_vc_verify_presentation(
      port_,
      presentation_json,
      proof_options_json,
    );
  }

  late final _wire_vc_verify_presentationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_vc_verify_presentation');
  late final _wire_vc_verify_presentation =
      _wire_vc_verify_presentationPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
