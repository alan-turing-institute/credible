// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.64.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'dart:ffi' as ffi;

abstract class TrustchainFfi {
  /// Example greet function.
  Future<String> greet({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGreetConstMeta;

  /// Resolves a given DID document returning the serialized DID document as a JSON string.
  Future<String> didResolve(
      {required String did, required String opts, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDidResolveConstMeta;

  /// Verifies a given DID returning the serialized DIDChain as a JSON string.
  Future<String> didVerify(
      {required String did, required String opts, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDidVerifyConstMeta;

  /// Verifies a verifiable credential returning the serialized DIDChain as a JSON string.
  Future<String> vcVerifyCredential(
      {required String credential, required String opts, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVcVerifyCredentialConstMeta;

  /// Issues a verifiable presentation. Analogous with [didkit](https://docs.rs/didkit/latest/didkit/c/fn.didkit_vc_issue_presentation.html).
  Future<String> vpIssuePresentation(
      {required String presentation,
      required String opts,
      required String jwkJson,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVpIssuePresentationConstMeta;

  /// Initializes a local Bitcoin SPV client with a directory path for
  /// writing block headers data.
  Future<void> spvInitialize(
      {required String path,
      required bool testnet,
      String? logLevel,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSpvInitializeConstMeta;

  /// Shuts down the local Bitcoin SPV client.
  Future<void> spvShutdown(
      {required String path, required bool testnet, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSpvShutdownConstMeta;

  /// Gets the current synchronised block height of the local Bitcoin SPV node.
  Future<String> spvGetTip(
      {required String path,
      required bool testnet,
      int? timeoutMillis,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSpvGetTipConstMeta;

  /// Gets a block header from the local Bitcoin SPV client.
  Future<String> spvGetBlockHeader(
      {required String hash,
      required String path,
      required bool testnet,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSpvGetBlockHeaderConstMeta;
}

class TrustchainFfiImpl implements TrustchainFfi {
  final TrustchainFfiPlatform _platform;
  factory TrustchainFfiImpl(ExternalLibrary dylib) =>
      TrustchainFfiImpl.raw(TrustchainFfiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory TrustchainFfiImpl.wasm(FutureOr<WasmModule> module) =>
      TrustchainFfiImpl(module as ExternalLibrary);
  TrustchainFfiImpl.raw(this._platform);
  Future<String> greet({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_greet(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kGreetConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGreetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "greet",
        argNames: [],
      );

  Future<String> didResolve(
      {required String did, required String opts, dynamic hint}) {
    var arg0 = _platform.api2wire_String(did);
    var arg1 = _platform.api2wire_String(opts);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_did_resolve(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kDidResolveConstMeta,
      argValues: [did, opts],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDidResolveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "did_resolve",
        argNames: ["did", "opts"],
      );

  Future<String> didVerify(
      {required String did, required String opts, dynamic hint}) {
    var arg0 = _platform.api2wire_String(did);
    var arg1 = _platform.api2wire_String(opts);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_did_verify(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kDidVerifyConstMeta,
      argValues: [did, opts],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDidVerifyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "did_verify",
        argNames: ["did", "opts"],
      );

  Future<String> vcVerifyCredential(
      {required String credential, required String opts, dynamic hint}) {
    var arg0 = _platform.api2wire_String(credential);
    var arg1 = _platform.api2wire_String(opts);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_vc_verify_credential(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kVcVerifyCredentialConstMeta,
      argValues: [credential, opts],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVcVerifyCredentialConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vc_verify_credential",
        argNames: ["credential", "opts"],
      );

  Future<String> vpIssuePresentation(
      {required String presentation,
      required String opts,
      required String jwkJson,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(presentation);
    var arg1 = _platform.api2wire_String(opts);
    var arg2 = _platform.api2wire_String(jwkJson);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_vp_issue_presentation(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kVpIssuePresentationConstMeta,
      argValues: [presentation, opts, jwkJson],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVpIssuePresentationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "vp_issue_presentation",
        argNames: ["presentation", "opts", "jwkJson"],
      );

  Future<void> spvInitialize(
      {required String path,
      required bool testnet,
      String? logLevel,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = testnet;
    var arg2 = _platform.api2wire_opt_String(logLevel);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_spv_initialize(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSpvInitializeConstMeta,
      argValues: [path, testnet, logLevel],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpvInitializeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "spv_initialize",
        argNames: ["path", "testnet", "logLevel"],
      );

  Future<void> spvShutdown(
      {required String path, required bool testnet, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = testnet;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_spv_shutdown(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSpvShutdownConstMeta,
      argValues: [path, testnet],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpvShutdownConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "spv_shutdown",
        argNames: ["path", "testnet"],
      );

  Future<String> spvGetTip(
      {required String path,
      required bool testnet,
      int? timeoutMillis,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    var arg1 = testnet;
    var arg2 = _platform.api2wire_opt_box_autoadd_u32(timeoutMillis);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_spv_get_tip(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kSpvGetTipConstMeta,
      argValues: [path, testnet, timeoutMillis],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpvGetTipConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "spv_get_tip",
        argNames: ["path", "testnet", "timeoutMillis"],
      );

  Future<String> spvGetBlockHeader(
      {required String hash,
      required String path,
      required bool testnet,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(hash);
    var arg1 = _platform.api2wire_String(path);
    var arg2 = testnet;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_spv_get_block_header(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kSpvGetBlockHeaderConstMeta,
      argValues: [hash, path, testnet],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSpvGetBlockHeaderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "spv_get_block_header",
        argNames: ["hash", "path", "testnet"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class TrustchainFfiPlatform extends FlutterRustBridgeBase<TrustchainFfiWire> {
  TrustchainFfiPlatform(ffi.DynamicLibrary dylib)
      : super(TrustchainFfiWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class TrustchainFfiWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TrustchainFfiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TrustchainFfiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_greet(
    int port_,
  ) {
    return _wire_greet(
      port_,
    );
  }

  late final _wire_greetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_greet');
  late final _wire_greet = _wire_greetPtr.asFunction<void Function(int)>();

  void wire_did_resolve(
    int port_,
    ffi.Pointer<wire_uint_8_list> did,
    ffi.Pointer<wire_uint_8_list> opts,
  ) {
    return _wire_did_resolve(
      port_,
      did,
      opts,
    );
  }

  late final _wire_did_resolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_did_resolve');
  late final _wire_did_resolve = _wire_did_resolvePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_did_verify(
    int port_,
    ffi.Pointer<wire_uint_8_list> did,
    ffi.Pointer<wire_uint_8_list> opts,
  ) {
    return _wire_did_verify(
      port_,
      did,
      opts,
    );
  }

  late final _wire_did_verifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_did_verify');
  late final _wire_did_verify = _wire_did_verifyPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_vc_verify_credential(
    int port_,
    ffi.Pointer<wire_uint_8_list> credential,
    ffi.Pointer<wire_uint_8_list> opts,
  ) {
    return _wire_vc_verify_credential(
      port_,
      credential,
      opts,
    );
  }

  late final _wire_vc_verify_credentialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_vc_verify_credential');
  late final _wire_vc_verify_credential =
      _wire_vc_verify_credentialPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_vp_issue_presentation(
    int port_,
    ffi.Pointer<wire_uint_8_list> presentation,
    ffi.Pointer<wire_uint_8_list> opts,
    ffi.Pointer<wire_uint_8_list> jwk_json,
  ) {
    return _wire_vp_issue_presentation(
      port_,
      presentation,
      opts,
      jwk_json,
    );
  }

  late final _wire_vp_issue_presentationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_vp_issue_presentation');
  late final _wire_vp_issue_presentation =
      _wire_vp_issue_presentationPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_spv_initialize(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    bool testnet,
    ffi.Pointer<wire_uint_8_list> log_level,
  ) {
    return _wire_spv_initialize(
      port_,
      path,
      testnet,
      log_level,
    );
  }

  late final _wire_spv_initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Bool,
              ffi.Pointer<wire_uint_8_list>)>>('wire_spv_initialize');
  late final _wire_spv_initialize = _wire_spv_initializePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, bool,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_spv_shutdown(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    bool testnet,
  ) {
    return _wire_spv_shutdown(
      port_,
      path,
      testnet,
    );
  }

  late final _wire_spv_shutdownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_spv_shutdown');
  late final _wire_spv_shutdown = _wire_spv_shutdownPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_spv_get_tip(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    bool testnet,
    ffi.Pointer<ffi.Uint32> timeout_millis,
  ) {
    return _wire_spv_get_tip(
      port_,
      path,
      testnet,
      timeout_millis,
    );
  }

  late final _wire_spv_get_tipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Bool,
              ffi.Pointer<ffi.Uint32>)>>('wire_spv_get_tip');
  late final _wire_spv_get_tip = _wire_spv_get_tipPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, bool, ffi.Pointer<ffi.Uint32>)>();

  void wire_spv_get_block_header(
    int port_,
    ffi.Pointer<wire_uint_8_list> hash,
    ffi.Pointer<wire_uint_8_list> path,
    bool testnet,
  ) {
    return _wire_spv_get_block_header(
      port_,
      hash,
      path,
      testnet,
    );
  }

  late final _wire_spv_get_block_headerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_spv_get_block_header');
  late final _wire_spv_get_block_header =
      _wire_spv_get_block_headerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, bool)>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
